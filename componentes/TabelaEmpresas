import React, { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Building2, MapPin, Phone, Mail, ExternalLink, CheckCircle, Calculator, Edit, Eye } from "lucide-react";
import { motion, AnimatePresence } from "framer-motion";
import { HoverCard, HoverCardContent, HoverCardTrigger } from "@/components/ui/hover-card";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";

import ModalEditarEmpresa from "./ModalEditarEmpresa";

export default function TabelaEmpresas({ 
  empresas, 
  destino, 
  onCalcularRota, 
  onSelecionarEmpresa,
  rotasCalculadas,
  carregandoRota,
  onEmpresaAtualizada 
}) {
  const [empresaSelecionada, setEmpresaSelecionada] = useState(null);
  const [empresaEditando, setEmpresaEditando] = useState(null);
  const [modalEditarAberto, setModalEditarAberto] = useState(false);

  const handleSelecionarEmpresa = (empresa) => {
    setEmpresaSelecionada(empresa.id);
    onSelecionarEmpresa(empresa);
  };

  const handleEditarEmpresa = (empresa) => {
    setEmpresaEditando(empresa);
    setModalEditarAberto(true);
  };

  const handleFecharModal = () => {
    setModalEditarAberto(false);
    setEmpresaEditando(null);
  };

  const handleEmpresaSalva = () => {
    if (onEmpresaAtualizada) {
      onEmpresaAtualizada();
    }
  };

  return (
    <TooltipProvider>
      <Card className="shadow-lg border-0 bg-white/80 backdrop-blur-sm">
        <CardHeader className="pb-4">
          <CardTitle className="flex items-center gap-2 text-xl font-bold text-gray-900">
            <Building2 className="w-5 h-5 text-blue-600" />
            Empresas Credenciadas ({empresas.length})
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="overflow-x-auto">
            <Table>
              <TableHeader>
                <TableRow className="bg-gray-50 hover:bg-gray-50">
                  <TableHead className="font-semibold">Ordem</TableHead>
                  <TableHead className="font-semibold">Empresa</TableHead>
                  <TableHead className="font-semibold">Contrato</TableHead>
                  <TableHead className="font-semibold">Atividades</TableHead>
                  <TableHead className="font-semibold">Serviços</TableHead>
                  <TableHead className="font-semibold">Municípios</TableHead>
                  <TableHead className="font-semibold">Região</TableHead>
                  <TableHead className="font-semibold">Chamados</TableHead>
                  <TableHead className="font-semibold">Rota</TableHead>
                  <TableHead className="font-semibold">Contato</TableHead>
                  <TableHead className="font-semibold">Ações</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                <AnimatePresence>
                  {empresas.map((empresa) => {
                    const rota = rotasCalculadas[empresa.id];
                    return (
                      <motion.tr
                        key={empresa.id}
                        initial={{ opacity: 0, y: 20 }}
                        animate={{ opacity: 1, y: 0 }}
                        exit={{ opacity: 0, y: -20 }}
                        className={`hover:bg-blue-50 transition-colors duration-200 ${
                          empresaSelecionada === empresa.id ? 'bg-green-50 border-green-200 border' : ''
                        }`}
                      >
                        <TableCell>
                          <Badge variant="outline" className="bg-blue-50 text-blue-700 border-blue-200">
                            {empresa.ordem}
                          </Badge>
                        </TableCell>
                        <TableCell>
                          <div className="space-y-1">
                            <p className="font-semibold text-gray-900">{empresa.nome_empresa}</p>
                            <p className="text-xs text-gray-500 flex items-center gap-1">
                              <MapPin className="w-3 h-3" />
                              {empresa.localizacao_origem}
                            </p>
                          </div>
                        </TableCell>
                        <TableCell>
                          <Badge variant="secondary" className="bg-gray-100">
                            {empresa.numero_contrato}
                          </Badge>
                        </TableCell>
                        <TableCell>
                          <div className="flex flex-wrap gap-1">
                            {empresa.quadro_atividades?.map((atividade) => (
                              <Badge
                                key={atividade}
                                className="bg-purple-100 text-purple-700 border-purple-200 text-xs"
                              >
                                {atividade}
                              </Badge>
                            ))}
                          </div>
                        </TableCell>
                        <TableCell className="max-w-48">
                          {empresa.descricao_servicos ? (
                            <Tooltip>
                              <TooltipTrigger asChild>
                                <div className="text-xs text-gray-600 truncate cursor-help">
                                  {empresa.descricao_servicos}
                                </div>
                              </TooltipTrigger>
                              <TooltipContent className="max-w-80">
                                <p>{empresa.descricao_servicos}</p>
                              </TooltipContent>
                            </Tooltip>
                          ) : (
                            <span className="text-xs text-gray-400 italic">Não informado</span>
                          )}
                        </TableCell>
                        <TableCell>
                          <div className="flex flex-wrap gap-1">
                            {empresa.quadro_municipios?.slice(0, 3).map((municipio) => (
                              <Badge
                                key={municipio}
                                variant="outline"
                                className="text-xs"
                              >
                                {municipio}
                              </Badge>
                            ))}
                            {empresa.quadro_municipios?.length > 3 && (
                              <Badge variant="outline" className="text-xs">
                                +{empresa.quadro_municipios.length - 3}
                              </Badge>
                            )}
                          </div>
                        </TableCell>
                        <TableCell>
                          <div className="space-y-1">
                            {empresa.quadro_estados_regioes?.slice(0, 2).map((regiao, idx) => (
                              <p key={idx} className="text-xs text-gray-600">{regiao}</p>
                            ))}
                            {empresa.quadro_estados_regioes?.length > 2 && (
                              <p className="text-xs text-gray-500">
                                +{empresa.quadro_estados_regioes.length - 2} mais
                              </p>
                            )}
                          </div>
                        </TableCell>
                        <TableCell>
                          <div className="text-center">
                            <Badge 
                              className={`${
                                empresa.controle_chamados <= 3 
                                  ? 'bg-green-100 text-green-800' 
                                  : empresa.controle_chamados <= 7 
                                    ? 'bg-yellow-100 text-yellow-800' 
                                    : 'bg-red-100 text-red-800'
                              }`}
                            >
                              {empresa.controle_chamados}
                            </Badge>
                          </div>
                        </TableCell>
                        <TableCell>
                          {rota ? (
                            <div className="space-y-1">
                              <p className="text-sm font-medium text-green-700">{rota.distancia}</p>
                              <p className="text-xs text-gray-500">{rota.tempo}</p>
                              <HoverCard>
                                <HoverCardTrigger asChild>
                                  <Button
                                    size="sm"
                                    variant="outline"
                                    className="text-xs h-7"
                                    onClick={() => window.open(rota.urlMapa, '_blank')}
                                  >
                                    <ExternalLink className="w-3 h-3 mr-1" />
                                    Ver Mapa
                                  </Button>
                                </HoverCardTrigger>
                                <HoverCardContent>
                                  Abrir rota no Google Maps
                                </HoverCardContent>
                              </HoverCard>
                            </div>
                          ) : (
                            <Button
                              size="sm"
                              variant="outline"
                              onClick={() => onCalcularRota(empresa)}
                              disabled={!destino || carregandoRota === empresa.id}
                              className="text-xs h-7"
                            >
                              {carregandoRota === empresa.id ? (
                                <div className="animate-spin w-3 h-3 border border-gray-300 border-t-blue-600 rounded-full mr-1" />
                              ) : (
                                <Calculator className="w-3 h-3 mr-1" />
                              )}
                              Calcular
                            </Button>
                          )}
                        </TableCell>
                        <TableCell>
                          <div className="space-y-1">
                            <div className="flex items-center gap-1">
                              <Mail className="w-3 h-3 text-gray-400" />
                              <p className="text-xs text-gray-600">{empresa.email}</p>
                            </div>
                            <div className="flex items-center gap-1">
                              <Phone className="w-3 h-3 text-gray-400" />
                              <p className="text-xs text-gray-600">{empresa.telefone}</p>
                            </div>
                          </div>
                        </TableCell>
                        <TableCell>
                          <div className="flex gap-2">
                            <Tooltip>
                              <TooltipTrigger asChild>
                                <Button
                                  size="sm"
                                  variant="outline"
                                  onClick={() => handleEditarEmpresa(empresa)}
                                  className="h-8 w-8 p-0"
                                >
                                  <Edit className="w-3 h-3" />
                                </Button>
                              </TooltipTrigger>
                              <TooltipContent>
                                Editar empresa
                              </TooltipContent>
                            </Tooltip>
                            
                            <Button
                              size="sm"
                              onClick={() => handleSelecionarEmpresa(empresa)}
                              className={`h-8 text-xs font-medium transition-all duration-300 ${
                                empresaSelecionada === empresa.id
                                  ? 'bg-green-600 hover:bg-green-700 text-white'
                                  : 'bg-blue-600 hover:bg-blue-700 text-white'
                              }`}
                            >
                              {empresaSelecionada === empresa.id ? (
                                <>
                                  <CheckCircle className="w-3 h-3 mr-1" />
                                  Selecionada
                                </>
                              ) : (
                                'Selecionar'
                              )}
                            </Button>
                          </div>
                        </TableCell>
                      </motion.tr>
                    );
                  })}
                </AnimatePresence>
              </TableBody>
            </Table>
          </div>

          {empresas.length === 0 && (
            <div className="text-center py-12">
              <Building2 className="w-12 h-12 text-gray-300 mx-auto mb-4" />
              <p className="text-gray-500 text-lg font-medium">Nenhuma empresa encontrada</p>
              <p className="text-gray-400 text-sm mt-2">
                Ajuste os filtros para encontrar empresas credenciadas
              </p>
            </div>
          )}
        </CardContent>
      </Card>

      <ModalEditarEmpresa
        empresa={empresaEditando}
        isOpen={modalEditarAberto}
        onClose={handleFecharModal}
        onSave={handleEmpresaSalva}
      />
    </TooltipProvider>
  );
}
