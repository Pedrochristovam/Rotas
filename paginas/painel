import React, { useState, useEffect, useCallback } from "react";
import { Empresa } from "@/entities/Empresa";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { CheckCircle, AlertCircle, Route } from "lucide-react";
import { motion } from "framer-motion";

import FiltrosAvancados from "../components/dashboard/FiltrosAvancados";
import TabelaEmpresas from "../components/dashboard/TabelaEmpresas";
import EstatisticasRapidas from "../components/dashboard/EstatisticasRapidas";

export default function Dashboard() {
  const [empresas, setEmpresas] = useState([]);
  const [empresasFiltradas, setEmpresasFiltradas] = useState([]);
  const [filtros, setFiltros] = useState({});
  const [rotasCalculadas, setRotasCalculadas] = useState({});
  const [carregandoRota, setCarregandoRota] = useState(null);
  const [empresaSelecionada, setEmpresaSelecionada] = useState(null);
  const [isLoading, setIsLoading] = useState(true);

  const carregarEmpresas = useCallback(async () => {
    setIsLoading(true);
    try {
      const data = await Empresa.list("ordem");
      setEmpresas(data);
      setEmpresasFiltradas(data);
    } catch (error) {
      console.error("Erro ao carregar empresas:", error);
    }
    setIsLoading(false);
  }, []);

  useEffect(() => {
    carregarEmpresas();
  }, [carregarEmpresas]);

  const handleFiltroChange = (campo, valor) => {
    setFiltros(prev => ({
      ...prev,
      [campo]: valor
    }));
  };

  const handleLimparFiltros = () => {
    setFiltros({});
    setEmpresasFiltradas(empresas);
    setRotasCalculadas({});
  };

  const aplicarFiltros = () => {
    let empresasFiltradas = [...empresas];

    // Filtro por serviços
    if (filtros.servicos?.length) {
      empresasFiltradas = empresasFiltradas.filter(empresa => 
        filtros.servicos.some(servico => 
          empresa.quadro_atividades?.includes(servico)
        )
      );
    }

    // Filtro por municípios
    if (filtros.municipios?.length) {
      empresasFiltradas = empresasFiltradas.filter(empresa => 
        filtros.municipios.some(municipio => 
          empresa.quadro_municipios?.includes(municipio)
        )
      );
    }

    // Filtro por região
    if (filtros.regiao) {
      empresasFiltradas = empresasFiltradas.filter(empresa => 
        empresa.quadro_estados_regioes?.some(regiao => 
          regiao.toLowerCase().includes(filtros.regiao.toLowerCase())
        )
      );
    }

    // Filtro por busca nos serviços
    if (filtros.buscaServicos) {
      const termoBusca = filtros.buscaServicos.toLowerCase();
      empresasFiltradas = empresasFiltradas.filter(empresa => 
        empresa.descricao_servicos?.toLowerCase().includes(termoBusca) ||
        empresa.nome_empresa?.toLowerCase().includes(termoBusca)
      );
    }

    // Ordenação por chamados
    if (filtros.ordenacaoChamados) {
      if (filtros.ordenacaoChamados === "menos_chamadas") {
        empresasFiltradas.sort((a, b) => a.controle_chamados - b.controle_chamados);
      } else if (filtros.ordenacaoChamados === "mais_chamadas") {
        empresasFiltradas.sort((a, b) => b.controle_chamados - a.controle_chamados);
      }
    }

    setEmpresasFiltradas(empresasFiltradas);
  };

  const calcularRota = async (empresa) => {
    if (!filtros.destino) {
      alert("Por favor, informe o destino da vistoria nos filtros.");
      return;
    }

    setCarregandoRota(empresa.id);
    
    // Simulação de cálculo de rota
    setTimeout(() => {
      const distanciaKm = Math.floor(Math.random() * 200) + 10;
      const tempoMinutos = Math.floor(distanciaKm * 1.2) + Math.floor(Math.random() * 30);
      const tempoFormatado = `${Math.floor(tempoMinutos / 60)}h${tempoMinutos % 60}min`;
      
      const origem = encodeURIComponent(empresa.localizacao_origem);
      const destino = encodeURIComponent(filtros.destino);
      const urlMapa = `https://www.google.com/maps/dir/${origem}/${destino}`;

      setRotasCalculadas(prev => ({
        ...prev,
        [empresa.id]: {
          distancia: `${distanciaKm} km`,
          tempo: tempoFormatado,
          urlMapa
        }
      }));
      
      setCarregandoRota(null);
    }, 2000);
  };

  const selecionarEmpresa = (empresa) => {
    setEmpresaSelecionada(empresa);
  };

  if (isLoading) {
    return (
      <div className="p-8">
        <div className="max-w-7xl mx-auto">
          <div className="animate-pulse space-y-8">
            <div className="h-8 bg-gray-200 rounded w-1/3"></div>
            <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
              {[1,2,3,4].map(i => (
                <div key={i} className="h-32 bg-gray-200 rounded"></div>
              ))}
            </div>
            <div className="h-96 bg-gray-200 rounded"></div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="p-6 md:p-8 min-h-screen">
      <div className="max-w-7xl mx-auto space-y-8">
        {/* Header */}
        <motion.div 
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          className="text-center"
        >
          <h1 className="text-3xl md:text-4xl font-bold text-gray-900 mb-2">
            Sistema de Rotas para Vistorias
          </h1>
          <p className="text-gray-500 text-lg">
            Encontre e selecione empresas credenciadas com cálculo automático de rotas
          </p>
        </motion.div>

        {/* Estatísticas */}
        <EstatisticasRapidas empresas={empresasFiltradas} />

        {/* Empresa Selecionada */}
        {empresaSelecionada && (
          <motion.div
            initial={{ opacity: 0, scale: 0.95 }}
            animate={{ opacity: 1, scale: 1 }}
          >
            <Alert className="border-green-200 bg-green-50">
              <CheckCircle className="h-4 w-4 text-green-600" />
              <AlertDescription className="text-green-800">
                <strong>Empresa selecionada:</strong> {empresaSelecionada.nome_empresa} - 
                Contrato {empresaSelecionada.numero_contrato}
                <Button 
                  size="sm" 
                  className="ml-4 h-7 text-xs bg-green-600 hover:bg-green-700"
                >
                  Confirmar Seleção
                </Button>
              </AlertDescription>
            </Alert>
          </motion.div>
        )}

        {/* Filtros */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.2 }}
        >
          <FiltrosAvancados
            filtros={filtros}
            onFiltroChange={handleFiltroChange}
            onLimparFiltros={handleLimparFiltros}
            onBuscar={aplicarFiltros}
          />
        </motion.div>

        {/* Tabela de Empresas */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.4 }}
        >
          <TabelaEmpresas
            empresas={empresasFiltradas}
            destino={filtros.destino}
            onCalcularRota={calcularRota}
            onSelecionarEmpresa={selecionarEmpresa}
            rotasCalculadas={rotasCalculadas}
            carregandoRota={carregandoRota}
            onEmpresaAtualizada={carregarEmpresas}
          />
        </motion.div>
      </div>
    </div>
);
}
